trigger:
  - main

pool:
  vmImage: 'debian-latest'
  name: 'Default'

variables:
  - name: AZURE_ML_WORKSPACE
    value: 'azure-ml-test'
  - name: AZURE_ML_RESOURCE_GROUP
    value: 'east-us-rg-test'
  - name: MODEL_NAME
    value: 'llama-3-2-1b'
  - name: ENDPOINT_NAME
    value: 'llama-endpoint-v1'
  - name: MODEL_PATH
    value: '$(Build.SourcesDirectory)/models'
  - name: VENV_PATH
    value: '$(Build.SourcesDirectory)/venv'

steps:
- script: |
    sudo apt-get update
    sudo apt-get install -y software-properties-common
    sudo add-apt-repository -y ppa:deadsnakes/ppa
    sudo apt-get update
    sudo apt-get install -y python3.11 python3.11-dev python3.11-venv python3-pip python3-full
    sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
    python3.11 --version
  displayName: 'Install Python 3.11'

- script: |
    # Create and activate virtual environment
    python3.11 -m venv $(VENV_PATH)
    source $(VENV_PATH)/bin/activate
    
    # Upgrade pip and install dependencies
    python -m pip install --upgrade pip
    pip install torch transformers huggingface_hub azure-ai-ml
    
    # Verify installations
    python --version
    pip --version
  displayName: 'Setup virtual environment and install dependencies'

- script: |
    # Activate virtual environment
    source $(VENV_PATH)/bin/activate
    
    mkdir -p $(MODEL_PATH)
    python -c "
    from huggingface_hub import snapshot_download
    from transformers import AutoTokenizer, AutoModelForCausalLM
    
    # Download model and tokenizer
    model_path = '$(MODEL_PATH)'
    model_name = 'meta-llama/Llama-3.2-1B'
    
    # Download model files
    snapshot_download(
        repo_id=model_name,
        local_dir=model_path,
        token='$(HUGGINGFACE_TOKEN)'  # This should be set as a pipeline variable
    )
    "
  displayName: 'Download model from Hugging Face'

- script: |
    # Install Azure CLI
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    az --version
  displayName: 'Install Azure CLI'

- task: AzureCLI@2
  displayName: 'Setup Azure ML Workspace and Register Model'
  inputs:
    azureSubscription: 'azure-subscription'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Install Azure ML CLI extension
      az extension add -n ml -y
      
      # Set up Azure ML workspace
      az ml workspace show -n $(AZURE_ML_WORKSPACE) -g $(AZURE_ML_RESOURCE_GROUP) || \
      az ml workspace create -n $(AZURE_ML_WORKSPACE) -g $(AZURE_ML_RESOURCE_GROUP)

      # Register the model
      az ml model create \
        --name $(MODEL_NAME) \
        --path $(MODEL_PATH) \
        --type custom_model \
        --workspace-name $(AZURE_ML_WORKSPACE) \
        --resource-group $(AZURE_ML_RESOURCE_GROUP)

- task: AzureCLI@2
  displayName: 'Create Online Endpoint'
  inputs:
    azureSubscription: 'azure-subscription'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Create the endpoint with variable name
      az ml online-endpoint create \
        --name $(ENDPOINT_NAME) \
        --auth-mode key \
        --workspace-name $(AZURE_ML_WORKSPACE) \
        --resource-group $(AZURE_ML_RESOURCE_GROUP)

- task: AzureCLI@2
  displayName: 'Deploy Model to Online Endpoint'
  inputs:
    azureSubscription: 'azure-subscription'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Create deployment configuration with proper variable substitution
      sed -e "s/\$(ENDPOINT_NAME)/$(ENDPOINT_NAME)/g" \
          -e "s|\$(MODEL_PATH)|$(MODEL_PATH)|g" \
          deployment_config.yml > deployment_config_processed.yml
      
      # Deploy the model using the processed configuration file
      az ml online-deployment create -f deployment_config_processed.yml \
        --workspace-name $(AZURE_ML_WORKSPACE) \
        --resource-group $(AZURE_ML_RESOURCE_GROUP)

- task: AzureCLI@2
  displayName: 'Get Endpoint Details'
  inputs:
    azureSubscription: 'azure-subscription'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Get the scoring URI
      SCORING_URI=$(az ml online-endpoint show -n $(ENDPOINT_NAME) --workspace-name $(AZURE_ML_WORKSPACE) --resource-group $(AZURE_ML_RESOURCE_GROUP) --query "scoring_uri" -o tsv)
      echo "##vso[task.setvariable variable=SCORING_URI]$SCORING_URI"
      
      # Get the primary key
      PRIMARY_KEY=$(az ml online-endpoint get-credentials -n $(ENDPOINT_NAME) --workspace-name $(AZURE_ML_WORKSPACE) --resource-group $(AZURE_ML_RESOURCE_GROUP) --query "primaryKey" -o tsv)
      echo "##vso[task.setvariable variable=PRIMARY_KEY]$PRIMARY_KEY" 