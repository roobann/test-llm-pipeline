trigger:
  - main

pool:
  vmImage: 'debian-latest'
  name: 'Default'

variables:
  - name: AZURE_ML_WORKSPACE
    value: 'azure-ml-test'
  - name: AZURE_ML_RESOURCE_GROUP
    value: 'east-us-rg-test'
  - name: MODEL_NAME
    value: 'llama-3-2-1b'
  - name: ENDPOINT_NAME
    value: 'llama-endpoint-v1'
  - name: VENV_PATH
    value: '$(Build.SourcesDirectory)/venv'
  - name: AZURE_SERVICE_CONNECTION
    value: 'connection1'

steps:
- script: |
    sudo apt-get update
    sudo apt-get install -y software-properties-common
    sudo add-apt-repository -y ppa:deadsnakes/ppa
    sudo apt-get update
    sudo apt-get install -y python3.11 python3.11-dev python3.11-venv python3-pip python3-full
    sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
    python3.11 --version
  displayName: 'Install Python 3.11'

- script: |
    # Create and activate virtual environment
    python3.11 -m venv $(VENV_PATH)
    source $(VENV_PATH)/bin/activate
    
    # Upgrade pip and install dependencies
    python -m pip install --upgrade pip
    pip install azure-ai-ml
    
    # Verify installations
    python --version
    pip --version
  displayName: 'Setup virtual environment and install dependencies'

- script: |
    # Install Azure CLI
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    az --version
  displayName: 'Install Azure CLI'

- task: AzureCLI@2
  displayName: 'Setup Azure ML Workspace and Register Model'
  inputs:
    azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Install Azure ML CLI extension
      az extension add -n ml -y
      
      # Set up Azure ML workspace
      az ml workspace show -n $(AZURE_ML_WORKSPACE) -g $(AZURE_ML_RESOURCE_GROUP) || \
      az ml workspace create -n $(AZURE_ML_WORKSPACE) -g $(AZURE_ML_RESOURCE_GROUP)

      # Register the model from catalog
      az ml model create \
        --name $(MODEL_NAME) \
        --path azureml://registries/azureml-meta/models/Llama-3.2-1B/versions/3 \
        --type custom_model \
        --workspace-name $(AZURE_ML_WORKSPACE) \
        --resource-group $(AZURE_ML_RESOURCE_GROUP)

- task: AzureCLI@2
  displayName: 'Create or Update Online Endpoint'
  inputs:
    azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Check if endpoint exists and create or update accordingly
      if az ml online-endpoint show --name $(ENDPOINT_NAME) --workspace-name $(AZURE_ML_WORKSPACE) --resource-group $(AZURE_ML_RESOURCE_GROUP) &>/dev/null; then
        echo "Endpoint exists, updating..."
        az ml online-endpoint update \
          --name $(ENDPOINT_NAME) \
          --workspace-name $(AZURE_ML_WORKSPACE) \
          --resource-group $(AZURE_ML_RESOURCE_GROUP)
      else
        echo "Creating new endpoint..."
        az ml online-endpoint create \
          --name $(ENDPOINT_NAME) \
          --workspace-name $(AZURE_ML_WORKSPACE) \
          --resource-group $(AZURE_ML_RESOURCE_GROUP)
      fi

- task: AzureCLI@2
  displayName: 'Deploy Model to Online Endpoint'
  inputs:
    azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Deploy the model using the configuration file
      echo "Deploying model..."
      az ml online-deployment create \
        -f deployment_config.yml \
        --workspace-name $(AZURE_ML_WORKSPACE) \
        --resource-group $(AZURE_ML_RESOURCE_GROUP) \
        --all-traffic

- task: AzureCLI@2
  displayName: 'Get Endpoint Details'
  inputs:
    azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Get the scoring URI
      SCORING_URI=$(az ml online-endpoint show -n $(ENDPOINT_NAME) --workspace-name $(AZURE_ML_WORKSPACE) --resource-group $(AZURE_ML_RESOURCE_GROUP) --query "scoring_uri" -o tsv)
      echo "##vso[task.setvariable variable=SCORING_URI]$SCORING_URI"
      
      # Get the primary key
      PRIMARY_KEY=$(az ml online-endpoint get-credentials -n $(ENDPOINT_NAME) --workspace-name $(AZURE_ML_WORKSPACE) --resource-group $(AZURE_ML_RESOURCE_GROUP) --query "primaryKey" -o tsv)
      echo "##vso[task.setvariable variable=PRIMARY_KEY]$PRIMARY_KEY" 
